/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.TeamManagerRole;


import Sports.Doctor.Doctor;
import Sports.Doctor.DoctorDirectory;
import Sports.EcoSystem;
import Sports.Sport.SportDirectory;
import Sports.Team.Team;
import Sports.User.UserAccount;
import java.awt.CardLayout;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author anveshvarma
 */
public class RequestDoctorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RequestDoctorJPanel
     */

    JPanel container;
    UserAccount ua;
    EcoSystem ecosystem;
    DoctorDirectory dd;
    SportDirectory sd;
    Doctor doctor;
     SimpleDateFormat sdf1 =  new SimpleDateFormat("HH:mm");
        SimpleDateFormat sdf2=  new SimpleDateFormat("dd/MM/yyyy");
    public RequestDoctorJPanel(JPanel container, UserAccount ua, EcoSystem ecosystem) {
          initComponents();
        this.container = container;
        this.ecosystem = ecosystem;
        this.ua = ua;
        dd = ecosystem.getEnterpriseDirectory().getDoctorDirectory();
        sd = ecosystem.getEnterpriseDirectory().getSportsDirectory();
         populateSelect();
       // populateTable();
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        kGradientPanel1 = new keeptoo.KGradientPanel();
        jLabel4 = new javax.swing.JLabel();
        cmbTime = new javax.swing.JComboBox<>();
        getTimeSlotsButton = new javax.swing.JButton();
        txtDate = new com.toedter.calendar.JDateChooser();
        requestAppointment = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbDesignation = new javax.swing.JComboBox<>();
        cmbDoctors = new javax.swing.JComboBox<>();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backButton.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        kGradientPanel1.setkEndColor(new java.awt.Color(138, 217, 243));
        kGradientPanel1.setkStartColor(new java.awt.Color(153, 51, 255));

        jLabel4.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 204, 51));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Select Time:");

        getTimeSlotsButton.setText("Get Available Time Slots");
        getTimeSlotsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getTimeSlotsButtonActionPerformed(evt);
            }
        });

        requestAppointment.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        requestAppointment.setText("Request Appointment");
        requestAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestAppointmentActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Avenir Next", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 204, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Request Doctor Appointment");

        jLabel3.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 204, 51));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Select Date:");

        jLabel7.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 204, 51));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Designation:");

        jLabel2.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 204, 51));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Select Doctor:");

        cmbDesignation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDesignationActionPerformed(evt);
            }
        });

        cmbDoctors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDoctorsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap(336, Short.MAX_VALUE)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(getTimeSlotsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)))
                        .addGap(18, 18, 18)
                        .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmbDoctors, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                            .addComponent(cmbDesignation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(416, Short.MAX_VALUE))
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(requestAppointment)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        kGradientPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel7});

        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 269, Short.MAX_VALUE)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbDesignation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(36, 36, 36)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getTimeSlotsButton))
                .addGap(54, 54, 54)
                .addComponent(requestAppointment)
                .addGap(125, 125, 125))
        );

        add(kGradientPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 800));
    }// </editor-fold>//GEN-END:initComponents

    private void requestAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestAppointmentActionPerformed
       
      Doctor doctor = dd.getDoctor((String)cmbDoctors.getSelectedItem());
      Team team = sd.getTeam(ua);
      String date = sdf2.format(txtDate.getDate());
      try{
      dd.requestDoctor(sdf2.parse(date), sdf1.parse((String)cmbTime.getSelectedItem()), doctor,team);
      }
      catch(ParseException e)
              {
                  
              }
         JOptionPane.showMessageDialog(this, "Appointment Scheduled");
        
    }//GEN-LAST:event_requestAppointmentActionPerformed

    private void cmbDesignationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDesignationActionPerformed

        String designation = (String) cmbDesignation.getSelectedItem();
        ArrayList<Doctor> doctorsList  = dd.getDoctorsByDesignation(designation);
        DefaultComboBoxModel df = new DefaultComboBoxModel();
        for(Doctor d: doctorsList)
        {
            df.addElement(d.getDoctorName());
        }
        cmbDoctors.setModel(df);
       
    }//GEN-LAST:event_cmbDesignationActionPerformed

    private void getTimeSlotsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getTimeSlotsButtonActionPerformed
       ArrayList<Date> timeslots = new ArrayList<Date>();
        if(txtDate.getDate() == null) return;
        String designation = (String) cmbDesignation.getSelectedItem();
        ArrayList<Doctor> doctorsList  = dd.getDoctorsByDesignation(designation);
        String date =sdf2.format(txtDate.getDate());
        for(Doctor d: doctorsList)
        {
           if(d.getDoctorName().equals((String)cmbDoctors.getSelectedItem())){}
           try {
               d.setDate(sdf2.parse(date));
           } catch (ParseException ex) {
               Logger.getLogger(RequestDoctorJPanel.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        try {
            timeslots = dd.getAvailbleSlots(sdf2.parse(date),(String) cmbDoctors.getSelectedItem());
            
        } catch (ParseException ex) {
           ex.printStackTrace();
        }
       DefaultComboBoxModel df = new DefaultComboBoxModel();
          
        for(Date d: timeslots)
        {
            df.addElement(sdf1.format(d));
        }
        cmbTime.setModel(df);
             // TODO add your handling code here:
    }//GEN-LAST:event_getTimeSlotsButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        CardLayout crdLyt = (CardLayout) container.getLayout();
            crdLyt.show(container,"teamManager");

    }//GEN-LAST:event_backButtonActionPerformed

    private void cmbDoctorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDoctorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDoctorsActionPerformed

    private void populateSelect() {
        ArrayList<Doctor> doctors = dd.getDoctors();
        DefaultComboBoxModel df = new DefaultComboBoxModel();
        int flag=0;
        for(Doctor d: doctors)
        {
       
           for(int i=0;i<df.getSize();i++){
               if(df.getElementAt(i).equals(d.getDoctorDesignation()))
               {
                   flag=1;
                   break;
               }   
             }
           if(flag == 0)
               df.addElement(d.getDoctorDesignation());
           
        }
        cmbDesignation.setModel(df);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> cmbDesignation;
    private javax.swing.JComboBox<String> cmbDoctors;
    private javax.swing.JComboBox<String> cmbTime;
    private javax.swing.JButton getTimeSlotsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JButton requestAppointment;
    private com.toedter.calendar.JDateChooser txtDate;
    // End of variables declaration//GEN-END:variables
}
