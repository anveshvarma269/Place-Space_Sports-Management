/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.VenueManagerRole;


import Sports.EcoSystem;
import Sports.Sport.Match;
import Sports.Sport.SportDirectory;
import Sports.User.UserAccount;
import Sports.Venue.Venue;
import Sports.Venue.VenueDirectory;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anveshvarma
 */
public class VenueRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form VenueRequestsJPanel
     */
        JPanel container;
    EcoSystem ecosystem;
    UserAccount ua;
    VenueDirectory vd;
    SportDirectory sd;
    public VenueRequestsJPanel(JPanel container,UserAccount ua, EcoSystem ecosystem) {
        initComponents();
        this.container = container;
        this.ecosystem = ecosystem;
        this.ua = ua;
        date.setText(" "+String.valueOf(LocalTime.now().getHour()) + ":"+String.valueOf(LocalTime.now().getMinute()));
        vd = ecosystem.getEnterpriseDirectory().getVenueDirectory();
        
        sd = ecosystem.getEnterpriseDirectory().getSportsDirectory();
        populateTable();
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        kGradientPanel1 = new keeptoo.KGradientPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVreq = new javax.swing.JTable();
        date = new javax.swing.JLabel();
        btnAcceptRequest = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton3.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        jButton3.setText("<< Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        kGradientPanel1.setkEndColor(new java.awt.Color(0, 153, 153));
        kGradientPanel1.setkStartColor(new java.awt.Color(255, 204, 204));

        tblVreq.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        tblVreq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Sport", "Team 1", "Team 2", "Date", "Match Number", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblVreq);
        if (tblVreq.getColumnModel().getColumnCount() > 0) {
            tblVreq.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblVreq.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        date.setFont(new java.awt.Font("Avenir", 1, 24)); // NOI18N
        date.setForeground(new java.awt.Color(153, 0, 51));
        date.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        date.setText("<Date Time>");

        btnAcceptRequest.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        btnAcceptRequest.setText("Accept");
        btnAcceptRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptRequestActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 0));
        jButton2.setText("Decline");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Avenir Next", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Requests for Venue");

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(btnAcceptRequest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 770, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(188, 188, 188))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(date)
                .addContainerGap())
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(date)
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 316, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAcceptRequest)
                    .addComponent(jButton2))
                .addGap(74, 74, 74))
        );

        add(kGradientPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 800));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        CardLayout crdLyt = (CardLayout) container.getLayout();
            crdLyt.show(container,"venueManager");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnAcceptRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptRequestActionPerformed
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel) tblVreq.getModel();
        int selectedRow = tblVreq.getSelectedRow();
        if(selectedRow == -1) {JOptionPane.showMessageDialog(this, "Select match ");return;}
        Date datef = new Date();
        String sportName = df.getValueAt(selectedRow,0).toString();
        String matchNo = df.getValueAt(selectedRow,4).toString();
        String date = df.getValueAt(selectedRow,3).toString();
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy");
        try {
               datef = formatter.parse(date);
         }catch (ParseException e) {
           e.printStackTrace();
         }
        Match match = sd.getMatch(matchNo, sportName);
        Venue v = vd.getVenueUser(ua);
        vd.assignVenue(v, datef, match);
        populateTable();
    }//GEN-LAST:event_btnAcceptRequestActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel) tblVreq.getModel();
        int selectedRow = tblVreq.getSelectedRow();
        if(selectedRow == -1) {JOptionPane.showMessageDialog(this, "Select match request and proceed");return;}
        String sportName = df.getValueAt(selectedRow,0).toString();
        String matchNo = df.getValueAt(selectedRow,4).toString();
        Match match = sd.getMatch( matchNo,sportName);
        match.setVenueStatus("Declined");
        populateTable();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptRequest;
    private javax.swing.JLabel date;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JTable tblVreq;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        ArrayList<Venue> venues = vd.getVenueList();
        DefaultTableModel df = (DefaultTableModel) tblVreq.getModel();
        df.setRowCount(0);
        String date;
        HashMap<Match,Date>  venueRequests;
        for(Venue v: venues)
        {
            if(v.getUserAccount().equals(ua))
            {
           // if(v.getVenueName().equals("venue1")) continue;
            venueRequests = v.getMatchRequests();
            
            Set<Match> matches = venueRequests.keySet();
            for(Match m: matches)
            {
               DateFormat datef = new SimpleDateFormat("dd-MMM-yyyy"); 
               date = datef.format(venueRequests.get(m));
            String[] row = {m.getSport(),m.getTeam1().getTeamName(),m.getTeam2().getTeamName(),
            date,String.valueOf(m.getMatchNo()),m.getVenueStatus()};
             df.addRow(row);
            }
            }
        }
        tblVreq.setModel(df);
    }
}
